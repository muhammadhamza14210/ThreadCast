// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String   @unique
  clerkid     String   @unique
  studio      Media?
  firstName   String?
  lastName    String?
  image       String?
  trial       Boolean  @default(false)
  createdAt   DateTime @default(now())
  firstView    Boolean @default(false)
  workSpace   WorkSpace[]
  videos      Video[]
  members     Member[]
  subscription Subscription?
  notification Notification[]
  sender       Invite[] @relation("sender")
  reciever     Invite[] @relation("reciever")
  comment      Comment[]
}

model Media {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen   String?
  mic      String?
  camera   String?
  preset   PRESET @default(SD)
  User     User?    @relation(fields: [userId], references: [id])
  userId   String? @unique @db.Uuid
}

model WorkSpace {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        TYPE
  name        String   @unique
  description String?
  User        User?  @relation(fields:[userId], references: [id])
  userId      String? @unique @db.Uuid
  createdAt   DateTime @default(now())
  folders     Folder[]
  videos      Video[]
  members     Member[]
  invite      Invite[]
}

model Folder {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @default ("Untitled Folder")
  description String?
  WorkSpace   WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId String? @unique @db.Uuid
  videos      Video[]
}

model Video {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @default("Untitled Video")
  description  String?  @default("No Description")
  source       String?  @unique
  createdAt    DateTime @default(now())
  Folder       Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId     String?  @db.Uuid
  WorkSpace    WorkSpace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String?  @db.Uuid
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?  @db.Uuid
  processing   Boolean  @default(true)
  views        Int      @default(0)
  summary      String?
  Comment      Comment[]
}

model Member{
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?   @db.Uuid
  WorkSpace    WorkSpace? @relation(fields: [workspaceId], references: [id])
  workspaceId  String?   @db.Uuid
  member       Boolean   @default(false)
  createdAt    DateTime  @default(now())
}

model Notification{
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?   @db.Uuid
  content      String
}

model Invite{
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender       User?      @relation("sender", fields: [senderId], references: [id])
  senderId     String?    @db.Uuid
  receiver     User?      @relation("reciever",fields: [receiverId], references: [id])
  receiverId   String?    @db.Uuid
  content      String
  WorkSpace    WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId  String?    @db.Uuid
  accepted     Boolean    @default(false)
}

model Subscription {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @unique @db.Uuid
  plan        SUBSCRIPTION_PLAN @default(FREE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  customerId  String?  @unique
}

model Comment {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment      String
  reply        Comment[] @relation("reply")
  Comment      Comment?  @relation("reply", fields: [commentId], references: [id])
  commentId    String?  @db.Uuid
  User         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?  @db.Uuid
  Video        Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String?  @db.Uuid
  createdAt    DateTime @default(now())
}
enum PRESET {
  HD
  SD
}

enum TYPE {
  PERSONAL
  PUBLIC
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}